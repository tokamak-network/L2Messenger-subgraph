// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FailedRelayedMessage extends ethereum.Event {
  get params(): FailedRelayedMessage__Params {
    return new FailedRelayedMessage__Params(this);
  }
}

export class FailedRelayedMessage__Params {
  _event: FailedRelayedMessage;

  constructor(event: FailedRelayedMessage) {
    this._event = event;
  }

  get msgHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RelayedMessage extends ethereum.Event {
  get params(): RelayedMessage__Params {
    return new RelayedMessage__Params(this);
  }
}

export class RelayedMessage__Params {
  _event: RelayedMessage;

  constructor(event: RelayedMessage) {
    this._event = event;
  }

  get msgHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class SentMessage extends ethereum.Event {
  get params(): SentMessage__Params {
    return new SentMessage__Params(this);
  }
}

export class SentMessage__Params {
  _event: SentMessage;

  constructor(event: SentMessage) {
    this._event = event;
  }

  get target(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get message(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get messageNonce(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get gasLimit(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class L2CrossDomainMessenger extends ethereum.SmartContract {
  static bind(address: Address): L2CrossDomainMessenger {
    return new L2CrossDomainMessenger("L2CrossDomainMessenger", address);
  }

  l1CrossDomainMessenger(): Address {
    let result = super.call(
      "l1CrossDomainMessenger",
      "l1CrossDomainMessenger():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_l1CrossDomainMessenger(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "l1CrossDomainMessenger",
      "l1CrossDomainMessenger():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  messageNonce(): BigInt {
    let result = super.call("messageNonce", "messageNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_messageNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("messageNonce", "messageNonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  relayedMessages(param0: Bytes): boolean {
    let result = super.call(
      "relayedMessages",
      "relayedMessages(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_relayedMessages(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "relayedMessages",
      "relayedMessages(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sentMessages(param0: Bytes): boolean {
    let result = super.call("sentMessages", "sentMessages(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_sentMessages(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("sentMessages", "sentMessages(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  successfulMessages(param0: Bytes): boolean {
    let result = super.call(
      "successfulMessages",
      "successfulMessages(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_successfulMessages(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "successfulMessages",
      "successfulMessages(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  xDomainMessageSender(): Address {
    let result = super.call(
      "xDomainMessageSender",
      "xDomainMessageSender():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_xDomainMessageSender(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "xDomainMessageSender",
      "xDomainMessageSender():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class RelayMessageCall extends ethereum.Call {
  get inputs(): RelayMessageCall__Inputs {
    return new RelayMessageCall__Inputs(this);
  }

  get outputs(): RelayMessageCall__Outputs {
    return new RelayMessageCall__Outputs(this);
  }
}

export class RelayMessageCall__Inputs {
  _call: RelayMessageCall;

  constructor(call: RelayMessageCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _message(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _messageNonce(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RelayMessageCall__Outputs {
  _call: RelayMessageCall;

  constructor(call: RelayMessageCall) {
    this._call = call;
  }
}

export class SendMessageCall extends ethereum.Call {
  get inputs(): SendMessageCall__Inputs {
    return new SendMessageCall__Inputs(this);
  }

  get outputs(): SendMessageCall__Outputs {
    return new SendMessageCall__Outputs(this);
  }
}

export class SendMessageCall__Inputs {
  _call: SendMessageCall;

  constructor(call: SendMessageCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _message(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _gasLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SendMessageCall__Outputs {
  _call: SendMessageCall;

  constructor(call: SendMessageCall) {
    this._call = call;
  }
}
